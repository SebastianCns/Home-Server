@using Home_Server.Authentication;
@inject UserAccountService userAccountService
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="_model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="_model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button style="background-color:cadetblue; color:white" @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    /*Author: SebastianCns Date: 02.03.23
    *
    *Description:
    *This code is for the login dialog. It checks
    *if a user exists and if his password is correct.
    *
    */
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model _model = new Model();

    private async Task Authenticate()
    {
        var userAccount = await userAccountService.GetByUserName(_model.UserName);

        if (userAccount == null)
        {
            await jsRuntime.InvokeVoidAsync("alert", "User does not exist");
            _model.UserName = "";
            _model.Password = "";
            return;
        }
        else if (userAccount.Password != _model.Password)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Password is incorrect");
            _model.Password = "";
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });

        navManager.NavigateTo("/", true);
    }
}
